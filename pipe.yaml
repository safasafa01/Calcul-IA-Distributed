# PIPELINE DEFINITION
# Name: image-processing-pipeline
# Description: Un pipeline pour le prétraitement des images, l'entraînement du modèle et la prédiction.
components:
  comp-predict:
    executorLabel: exec-predict
    inputDefinitions:
      parameters:
        img_path:
          parameterType: STRING
        model_path:
          parameterType: STRING
  comp-preprocess:
    executorLabel: exec-preprocess
    inputDefinitions:
      parameters:
        data_dir:
          parameterType: STRING
        output_dir:
          parameterType: STRING
  comp-train:
    executorLabel: exec-train
    inputDefinitions:
      parameters:
        data_dir:
          parameterType: STRING
        output_model:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-predict:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict(model_path: str, img_path: str):\n    \"\"\"\n    Cette\
          \ fonction charge le mod\xE8le et effectue une pr\xE9diction sur une nouvelle\
          \ image.\n    Si la pr\xE9diction est sup\xE9rieure ou \xE9gale \xE0 0.5,\
          \ on consid\xE8re que c'est une fleur.\n    \"\"\"\n    # Chargement du\
          \ mod\xE8le entra\xEEn\xE9\n    model = tf.keras.models.load_model(model_path)\n\
          \n    # Pr\xE9traitement de l'image\n    img = tf.keras.preprocessing.image.load_img(img_path,\
          \ target_size=(128, 128))\n    img_array = tf.keras.preprocessing.image.img_to_array(img)\
          \ / 255.0\n    img_array = tf.expand_dims(img_array, axis=0)\n\n    # Pr\xE9\
          diction\n    prediction = model.predict(img_array)\n    return \"Fleur\"\
          \ if prediction >= 0.5 else \"Pas une fleur\"\n\n"
        image: python:3.9
    exec-preprocess:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess(data_dir: str, output_dir: str):\n    \"\"\"\n   \
          \ Cette fonction est responsable du pr\xE9traitement des images.\n    Elle\
          \ redimensionne les images, les normalise, et cr\xE9e les g\xE9n\xE9rateurs\
          \ de donn\xE9es.\n    \"\"\"\n    datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n\
          \        rescale=1./255,\n        validation_split=0.2\n    )\n\n    # G\xE9\
          n\xE9rateur pour les donn\xE9es d'entra\xEEnement\n    train_generator =\
          \ datagen.flow_from_directory(\n        data_dir,  # Chemin dynamique\n\
          \        target_size=(128, 128),\n        batch_size=32,\n        class_mode='binary',\n\
          \        subset='training',\n        shuffle=True\n    )\n\n    # G\xE9\
          n\xE9rateur pour les donn\xE9es de validation\n    val_generator = datagen.flow_from_directory(\n\
          \        data_dir,  # Chemin dynamique\n        target_size=(128, 128),\n\
          \        batch_size=32,\n        class_mode='binary',\n        subset='validation'\n\
          \    )\n\n    # Sauvegarde des images pr\xE9trait\xE9es\n    os.makedirs(os.path.join(output_dir,\
          \ 'train'), exist_ok=True)\n    os.makedirs(os.path.join(output_dir, 'val'),\
          \ exist_ok=True)\n\n    for i, (images, labels) in enumerate(train_generator):\n\
          \        for j in range(images.shape[0]):\n            image = images[j]\n\
          \            image_name = f'train_image_{i * train_generator.batch_size\
          \ + j}.png'\n            tf.keras.preprocessing.image.save_img(os.path.join(output_dir,\
          \ 'train', image_name), image)\n\n        if i == train_generator.samples\
          \ // train_generator.batch_size:\n            break  # Stop apr\xE8s avoir\
          \ trait\xE9 tous les lots\n\n    for i, (images, labels) in enumerate(val_generator):\n\
          \        for j in range(images.shape[0]):\n            image = images[j]\n\
          \            image_name = f'val_image_{i * val_generator.batch_size + j}.png'\n\
          \            tf.keras.preprocessing.image.save_img(os.path.join(output_dir,\
          \ 'val', image_name), image)\n\n        if i == val_generator.samples //\
          \ val_generator.batch_size:\n            break  # Stop apr\xE8s avoir trait\xE9\
          \ tous les lots\n\n"
        image: python:3.9
    exec-train:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train(data_dir: str, output_model: str):\n    \"\"\"\n    Cette\
          \ fonction cr\xE9e et entra\xEEne un mod\xE8le CNN pour classer les images\
          \ comme \xE9tant une fleur ou non.\n    \"\"\"\n    # Chargement des donn\xE9\
          es d'entra\xEEnement et de validation\n    train_data = tf.data.experimental.load(f\"\
          {data_dir}/train\")\n    val_data = tf.data.experimental.load(f\"{data_dir}/val\"\
          )\n\n    # Cr\xE9ation du mod\xE8le CNN\n    model = tf.keras.models.Sequential([\n\
          \        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128,\
          \ 128, 3)),\n        tf.keras.layers.MaxPooling2D(2, 2),\n        tf.keras.layers.Conv2D(64,\
          \ (3, 3), activation='relu'),\n        tf.keras.layers.MaxPooling2D(2, 2),\n\
          \        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(128,\
          \ activation='relu'),\n        tf.keras.layers.Dense(1, activation='sigmoid')\
          \  # Sortie binaire (fleur ou pas)\n    ])\n\n    # Compilation du mod\xE8\
          le\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\
          \n    # Entra\xEEnement du mod\xE8le\n    model.fit(train_data, validation_data=val_data,\
          \ epochs=5)\n\n    # Sauvegarde du mod\xE8le entra\xEEn\xE9\n    model.save(output_model)\n\
          \n"
        image: python:3.9
pipelineInfo:
  description: "Un pipeline pour le pr\xE9traitement des images, l'entra\xEEnement\
    \ du mod\xE8le et la pr\xE9diction."
  name: image-processing-pipeline
root:
  dag:
    tasks:
      predict:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict
        dependentTasks:
        - train
        inputs:
          parameters:
            img_path:
              runtimeValue:
                constant: chemin vets l image
            model_path:
              runtimeValue:
                constant: /chemin/vers/sauvegarde_model
        taskInfo:
          name: predict
      preprocess:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess
        inputs:
          parameters:
            data_dir:
              runtimeValue:
                constant: chemin vers l image
            output_dir:
              runtimeValue:
                constant: /chemin/vers/output
        taskInfo:
          name: preprocess
      train:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train
        inputs:
          parameters:
            data_dir:
              runtimeValue:
                constant: /chemin/vers/output
            output_model:
              runtimeValue:
                constant: /chemin/vers/sauvegarde_model
        taskInfo:
          name: train
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
